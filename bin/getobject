#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2012, Joyent, Inc. All rights reserved.

var path = require('path');

var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var uuid = require('node-uuid');

var moray = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
        name: 'getbucket',
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: bunyan.stdSerializers
});



///--- Functions

function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += '[-v] [-s] [-h host] [-p port] /$bucket/$key';
        console.error(str);
        process.exit(1);
}


function parseOptions() {
        var option;
        var opts = {
                host: 'localhost',
                port: 2020,
        };
        var parser = new getopt.BasicParser('vsh:p:',
                                            process.argv);
        var tmp;

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'h':
                        opts.host = option.optarg;
                        break;

                case 'p':
                        opts.port = parseInt(option.optarg, 10);
                        break;

                case 's':
                        opts.noCache = true;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }
        }

        if (parser.optind() >= process.argv.length)
                usage('missing required argument: "name"');

        var tmp = process.argv[parser.optind()].split('/');
        tmp.shift();
        if (tmp.length < 2)
                usage('name must be "/$bucket/$key"');

        opts.bucket = tmp.shift();
        tmp.unshift('');
        opts.key = tmp.join('/');

        return (opts);
}



///--- Mainline

var client;
var options = parseOptions();

client = moray.createClient({
        host: options.host,
        log: LOG,
        port: options.port
});

client.on('connect', function onConnect() {
        client.getObject(options.bucket,
                         options.key,
                         { noCache: options.noCache },
                         function callback(err, obj) {
                                 if (err) {
                                         console.error(err.message);
                                         process.exit(1);
                                 }

		                 console.log(JSON.stringify(obj, null, 2));
                                 process.exit(0);
                         });
});
